import { Component, OnInit } from '@angular/core';
import { AiService } from '../../services/ai.service';

export interface GeneratedContent {
  type: 'project_description' | 'skill_analysis' | 'resume_section' | 'cover_letter';
  title: string;
  content: string;
  timestamp: Date;
}

@Component({
  selector: 'app-ai-content-generator',
  templateUrl: './ai-content-generator.component.html',
  styleUrls: ['./ai-content-generator.component.css']
})
export class AiContentGeneratorComponent implements OnInit {
  selectedType: string = 'project_description';
  inputText: string = '';
  isGenerating: boolean = false;
  generatedContent: GeneratedContent[] = [];

  contentTypes = [
    { value: 'project_description', label: 'Project Description', icon: 'üìù' },
    { value: 'skill_analysis', label: 'Skill Analysis', icon: 'üîç' },
    { value: 'resume_section', label: 'Resume Section', icon: 'üìÑ' },
    { value: 'cover_letter', label: 'Cover Letter', icon: '‚úâÔ∏è' }
  ];

  constructor(private aiService: AiService) {}

  ngOnInit(): void {
    this.loadSavedContent();
  }

  async generateContent(): Promise<void> {
    if (!this.inputText.trim()) return;

    this.isGenerating = true;

    try {
      const content = await this.generateContentByType(this.selectedType, this.inputText);
      
      const generatedItem: GeneratedContent = {
        type: this.selectedType as any,
        title: this.getContentTitle(this.selectedType),
        content: content,
        timestamp: new Date()
      };

      this.generatedContent.unshift(generatedItem);
      this.saveContent();
      this.inputText = '';

    } catch (error) {
      console.error('Error generating content:', error);
    } finally {
      this.isGenerating = false;
    }
  }

  private async generateContentByType(type: string, input: string): Promise<string> {
    // Simulate AI content generation
    await new Promise(resolve => setTimeout(resolve, 2000));

    switch (type) {
      case 'project_description':
        return this.generateProjectDescription(input);
      case 'skill_analysis':
        return this.generateSkillAnalysis(input);
      case 'resume_section':
        return this.generateResumeSection(input);
      case 'cover_letter':
        return this.generateCoverLetter(input);
      default:
        return 'Generated content based on your input.';
    }
  }

  private generateProjectDescription(input: string): string {
    const templates = [
      `**Project Overview:**\nA comprehensive ${input} solution built with modern web technologies, featuring responsive design and intuitive user experience.\n\n**Key Features:**\n‚Ä¢ User-friendly interface\n‚Ä¢ Real-time data processing\n‚Ä¢ Scalable architecture\n‚Ä¢ Cross-platform compatibility\n\n**Technologies Used:**\n‚Ä¢ Frontend: Angular, TypeScript, SCSS\n‚Ä¢ Backend: Node.js, Express\n‚Ä¢ Database: MongoDB\n‚Ä¢ Deployment: Firebase, Docker`,
      
      `**${input} - Technical Implementation:**\n\nThis project demonstrates advanced full-stack development skills with a focus on performance and user experience.\n\n**Architecture:**\n‚Ä¢ Microservices-based design\n‚Ä¢ RESTful API implementation\n‚Ä¢ Real-time communication\n‚Ä¢ Cloud-native deployment\n\n**Achievements:**\n‚Ä¢ 40% performance improvement\n‚Ä¢ 99.9% uptime\n‚Ä¢ 1000+ active users\n‚Ä¢ 4.8/5 user rating`
    ];

    return templates[Math.floor(Math.random() * templates.length)];
  }

  private generateSkillAnalysis(input: string): string {
    return `**${input.toUpperCase()} - Skill Analysis:**\n\n**Current Proficiency:** Advanced\n**Years of Experience:** 3+ years\n\n**Strengths:**\n‚Ä¢ Deep understanding of core concepts\n‚Ä¢ Experience with modern frameworks\n‚Ä¢ Strong problem-solving abilities\n‚Ä¢ Continuous learning mindset\n\n**Areas for Growth:**\n‚Ä¢ Advanced optimization techniques\n‚Ä¢ Emerging technologies\n‚Ä¢ Leadership and mentoring\n‚Ä¢ Industry best practices\n\n**Recommended Learning Path:**\n1. Advanced ${input} patterns\n2. Performance optimization\n3. Testing strategies\n4. Architecture design\n\n**Resources:**\n‚Ä¢ Official documentation\n‚Ä¢ Online courses\n‚Ä¢ Community forums\n‚Ä¢ Open source projects`;
  }

  private generateResumeSection(input: string): string {
    return `**${input} - Professional Experience:**\n\n**Senior ${input} Developer** | Company Name | 2021 - Present\n\n‚Ä¢ Led development of enterprise-level ${input} applications serving 10,000+ users\n‚Ä¢ Implemented modern development practices including CI/CD, automated testing, and code reviews\n‚Ä¢ Collaborated with cross-functional teams to deliver high-quality software solutions\n‚Ä¢ Mentored junior developers and conducted technical interviews\n‚Ä¢ Reduced application load time by 50% through performance optimization\n\n**Key Achievements:**\n‚Ä¢ Successfully delivered 15+ projects on time and within budget\n‚Ä¢ Improved team productivity by 30% through process improvements\n‚Ä¢ Contributed to open-source projects with 500+ GitHub stars\n‚Ä¢ Presented technical solutions at 3 industry conferences`;
  }

  private generateCoverLetter(input: string): string {
    return `**Cover Letter for ${input} Position:**\n\nDear Hiring Manager,\n\nI am writing to express my strong interest in the ${input} position at your company. With over 5 years of experience in full-stack development and a passion for creating innovative solutions, I am confident that I would be a valuable addition to your team.\n\n**Why I'm a Great Fit:**\n‚Ä¢ Proven track record of delivering high-quality software solutions\n‚Ä¢ Strong technical skills in modern web technologies\n‚Ä¢ Excellent problem-solving and communication abilities\n‚Ä¢ Passionate about continuous learning and professional growth\n\n**What I Can Bring:**\n‚Ä¢ Expertise in ${input} development\n‚Ä¢ Experience with agile methodologies\n‚Ä¢ Strong collaboration and leadership skills\n‚Ä¢ Commitment to writing clean, maintainable code\n\nI am excited about the opportunity to contribute to your team and help drive innovation in the ${input} space. I would welcome the chance to discuss how my skills and experience align with your needs.\n\nBest regards,\n[Raghav Bharadwaj]`;
  }

  private getContentTitle(type: string): string {
    const titles: { [key: string]: string } = {
      'project_description': 'Project Description',
      'skill_analysis': 'Skill Analysis',
      'resume_section': 'Resume Section',
      'cover_letter': 'Cover Letter'
    };
    return titles[type] || 'Generated Content';
  }

  copyToClipboard(content: string): void {
    navigator.clipboard.writeText(content).then(() => {
      // You could add a toast notification here
      console.log('Content copied to clipboard');
    });
  }

  deleteContent(index: number): void {
    this.generatedContent.splice(index, 1);
    this.saveContent();
  }

  private saveContent(): void {
    localStorage.setItem('ai-generated-content', JSON.stringify(this.generatedContent));
  }

  private loadSavedContent(): void {
    const saved = localStorage.getItem('ai-generated-content');
    if (saved) {
      this.generatedContent = JSON.parse(saved);
    }
  }

  clearAllContent(): void {
    this.generatedContent = [];
    this.saveContent();
  }
}
